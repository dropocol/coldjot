generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String    @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?   @db.Text
    access_token      String?   @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?   @db.Text
    session_state     String?
    watchHistoryId    String?   @db.Text
    watchExpiration   DateTime?
    messageId         String?   @db.Text

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([watchHistoryId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    templates      Template[]
    contacts       Contact[]
    drafts         Draft[]
    TestData       TestData[]
    EmailList      EmailList[]
    Sequence       Sequence[]
    devSettings    DevSettings?
    EmailThread    EmailThread[]
    Notification   Notification?   @relation(fields: [notificationId], references: [id])
    notificationId String?
    businessHours  BusinessHours[]
}

model Contact {
    id          String            @id @default(cuid())
    firstName   String
    lastName    String
    name        String
    email       String            @unique
    linkedinUrl String?
    title       String?
    companyId   String?
    userId      String
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    contacts    SequenceContact[] @relation("ContactToSequence")
    stats       SequenceStats[]

    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    drafts      Draft[]
    company     Company?      @relation(fields: [companyId], references: [id])
    emailLists  EmailList[]   @relation("EmailListContacts")
    EmailEvent  EmailEvent[]
    EmailThread EmailThread[]

    @@index([userId])
    @@index([companyId])
}

model Company {
    id        String    @id @default(cuid())
    userId    String
    name      String
    website   String?
    domain    String?
    contacts  Contact[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Template {
    id      String @id @default(cuid())
    userId  String
    name    String
    subject String @default("")
    content String

    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    drafts       Draft[]
    SequenceStep SequenceStep[]
}

model Draft {
    id           String    @id @default(cuid())
    userId       String
    contactId    String
    templateId   String
    content      String
    gmailDraftId String?
    sent         Boolean   @default(false)
    sentAt       DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    contact  Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
    template Template @relation(fields: [templateId], references: [id])
}

model EmailList {
    id          String     @id @default(cuid())
    name        String
    description String?
    tags        String[]
    userId      String
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    contacts    Contact[]  @relation("EmailListContacts")
    sequences   Sequence[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@index([userId])
}

// -----------------------------------------
// -----------------------------------------
// -----------------------------------------

model Sequence {
    id             String            @id @default(cuid())
    name           String
    accessLevel    String            @default("team")
    scheduleType   String            @default("business")
    status         String            @default("draft")
    testMode       Boolean           @default(false)
    userId         String
    createdAt      DateTime          @default(now())
    updatedAt      DateTime          @updatedAt
    steps          SequenceStep[]
    user           User              @relation(fields: [userId], references: [id])
    EmailList      EmailList?        @relation(fields: [emailListId], references: [id])
    emailListId    String?
    stats          SequenceStats[]
    contacts       SequenceContact[] @relation("SequenceToContact")
    EmailEvent     EmailEvent[]
    EmailThread    EmailThread[]
    businessHours  BusinessHours?
    SequenceHealth SequenceHealth?

    @@index([userId])
}

model SequenceStep {
    id               String    @id @default(cuid())
    sequenceId       String
    stepType         String    @default("manual_email")
    priority         String    @default("medium")
    timing           String    @default("immediate")
    delayAmount      Int?
    delayUnit        String?
    subject          String?
    content          String?   @db.Text
    includeSignature Boolean   @default(true)
    note             String?   @db.Text
    order            Int
    previousStepId   String?
    replyToThread    Boolean   @default(false)
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    templateId       String?
    Template         Template? @relation(fields: [templateId], references: [id])
    sequence         Sequence  @relation(fields: [sequenceId], references: [id], onDelete: Cascade)

    @@index([sequenceId])
}

model SequenceContact {
    id              String    @id @default(cuid())
    sequenceId      String
    contactId       String
    status          String    @default("not_sent")
    currentStep     Int       @default(0)
    nextScheduledAt DateTime?
    completed       Boolean   @default(false)
    startedAt       DateTime  @default(now())
    lastProcessedAt DateTime?
    completedAt     DateTime?
    threadId        String?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    sequence Sequence @relation("SequenceToContact", fields: [sequenceId], references: [id])
    contact  Contact  @relation("ContactToSequence", fields: [contactId], references: [id])

    @@unique([sequenceId, contactId])
    @@index([sequenceId])
    @@index([contactId])
}

model SequenceStats {
    id              String   @id @default(cuid())
    sequenceId      String   @unique
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    contactId       String?
    totalEmails     Int?     @default(0)
    sentEmails      Int?     @default(0)
    openedEmails    Int?     @default(0)
    uniqueOpens     Int?     @default(0)
    clickedEmails   Int?     @default(0)
    repliedEmails   Int?     @default(0)
    bouncedEmails   Int?     @default(0)
    failedEmails    Int?     @default(0)
    unsubscribed    Int?     @default(0)
    interested      Int?     @default(0)
    peopleContacted Int?     @default(0)
    openRate        Float?   @default(0)
    clickRate       Float?   @default(0)
    replyRate       Float?   @default(0)
    bounceRate      Float?   @default(0)
    avgOpenTime     Float?
    avgClickTime    Float?
    avgReplyTime    Float?
    avgResponseTime Float?

    // Relations
    sequence Sequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
    contact  Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)

    @@index([sequenceId])
}

model SequenceHealth {
    id         String   @id @default(cuid())
    sequenceId String   @unique
    sequence   Sequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
    status     String   @default("healthy")
    errorCount Int      @default(0)
    lastCheck  DateTime @default(now())
    lastError  String?
    metrics    Json
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([sequenceId])
}

// Step status
model StepStatus {
    id          String    @id @default(cuid())
    sequenceId  String
    stepId      String
    contactId   String
    status      String    @default("pending") // pending, scheduled, sent, failed, bounced
    scheduledAt DateTime?
    sentAt      DateTime?
    error       String?
    messageId   String?
    threadId    String?
    bounceInfo  Json?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@unique([sequenceId, stepId, contactId])
}

// -----------------------------------------
// -----------------------------------------
// -----------------------------------------

model EmailTracking {
    id         String    @id @default(cuid())
    messageId  String?   @unique
    threadId   String?
    hash       String    @unique
    status     String    @default("pending")
    metadata   Json
    sequenceId String?
    stepId     String?
    contactId  String?
    userId     String
    openCount  Int       @default(0)
    sentAt     DateTime?
    openedAt   DateTime?
    clickedAt  DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    links  TrackedLink[]
    events EmailEvent[]

    @@index([messageId])
    @@index([threadId])
    @@index([hash])
    @@index([status])
    @@index([sequenceId])
    @@index([userId])
}

model EmailEvent {
    id         String   @id @default(cuid())
    trackingId String
    type       String
    metadata   Json?
    timestamp  DateTime @default(now())

    tracking   EmailTracking @relation(fields: [trackingId], references: [id], onDelete: Cascade)
    Contact    Contact?      @relation(fields: [contactId], references: [id])
    contactId  String?
    Sequence   Sequence?     @relation(fields: [sequenceId], references: [id])
    sequenceId String?

    @@index([trackingId])
    @@index([type])
    @@index([timestamp])
}

// -----------------------------------------
// -----------------------------------------
// -----------------------------------------

// New model to store links that need to be tracked
model TrackedLink {
    id              String   @id @default(cuid())
    emailTrackingId String
    originalUrl     String
    clickCount      Int      @default(0)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relation to the email tracking event
    emailTracking EmailTracking @relation(fields: [emailTrackingId], references: [id], onDelete: Cascade)
    // Store click history
    clicks        LinkClick[]

    @@index([emailTrackingId])
}

// Rename and update LinkClickEvent to LinkClick
model LinkClick {
    id            String   @id @default(cuid())
    trackedLinkId String
    timestamp     DateTime @default(now())

    // Relation to the tracked link
    trackedLink TrackedLink @relation(fields: [trackedLinkId], references: [id], onDelete: Cascade)

    @@index([trackedLinkId])
    @@index([timestamp])
}

// -----------------------------------------
// -----------------------------------------
// -----------------------------------------

// Add a new model to track email threads
model EmailThread {
    id             String   @id @default(cuid())
    gmailThreadId  String   @unique
    sequenceId     String
    contactId      String
    userId         String
    subject        String
    firstMessageId String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    sequence Sequence @relation(fields: [sequenceId], references: [id])
    contact  Contact  @relation(fields: [contactId], references: [id])
    user     User     @relation(fields: [userId], references: [id])

    @@index([gmailThreadId])
    @@index([sequenceId])
    @@index([contactId])
    @@index([userId])
}

model BusinessHours {
    id             String     @id @default(cuid())
    userId         String
    sequenceId     String?    @unique
    sequence       Sequence?  @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
    user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    timezone       String     @default("UTC")
    workDays       Int[]      @default([1, 2, 3, 4, 5])
    workHoursStart String     @default("09:00")
    workHoursEnd   String     @default("17:00")
    holidays       DateTime[]
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt

    @@index([userId])
    @@index([sequenceId])
}

// Queue metrics
model QueueMetrics {
    id        String   @id @default(cuid())
    timestamp DateTime @default(now())
    metrics   Json
}

// Queue alerts
model QueueAlert {
    id        String   @id @default(cuid())
    type      String
    queueName String
    value     String
    threshold String
    timestamp DateTime @default(now())
}

model QueueError {
    id        String   @id @default(cuid())
    jobId     String
    queueName String
    error     String
    stack     String
    attempt   Int
    timestamp DateTime @default(now())
}

model Notification {
    id        String   @id @default(cuid())
    type      String
    title     String
    message   String
    metadata  Json
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // User relationship
    users User[]
}

model TestData {
    id        String   @id @default(cuid())
    userId    String
    name      String
    type      String // 'company', 'contact', 'template'
    data      Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model DevSettings {
    id             String   @id @default(cuid())
    userId         String   @unique
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    disableSending Boolean  @default(false)
    testEmails     String[] // Store emails as an array
    updatedAt      DateTime @updatedAt
    createdAt      DateTime @default(now())

    @@index([userId])
}
