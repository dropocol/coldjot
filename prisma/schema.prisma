datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String    @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?   @db.Text
    access_token      String?   @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?   @db.Text
    session_state     String?
    watchHistoryId    String?   @db.Text
    watchExpiration   DateTime?
    messageId         String?   @db.Text

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([watchHistoryId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    templates     Template[]
    contacts      Contact[]
    drafts        Draft[]
    TestData      TestData[]
    EmailList     EmailList[]
    Sequence      Sequence[]
    devSettings   DevSettings?
    EmailThread   EmailThread[]
}

model Contact {
    id          String            @id @default(cuid())
    firstName   String
    lastName    String
    name        String
    email       String            @unique
    linkedinUrl String?
    title       String?
    companyId   String?
    userId      String
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    contacts    SequenceContact[] @relation("ContactToSequence")
    stats       SequenceStats[]

    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    drafts      Draft[]
    company     Company?      @relation(fields: [companyId], references: [id])
    emailLists  EmailList[]   @relation("EmailListContacts")
    EmailEvent  EmailEvent[]
    EmailThread EmailThread[]

    @@index([userId])
    @@index([companyId])
}

model Company {
    id        String    @id @default(cuid())
    userId    String
    name      String
    website   String?
    domain    String?
    contacts  Contact[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Template {
    id      String @id @default(cuid())
    userId  String
    name    String
    subject String @default("")
    content String

    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    drafts       Draft[]
    SequenceStep SequenceStep[]
}

model Draft {
    id           String    @id @default(cuid())
    userId       String
    contactId    String
    templateId   String
    content      String
    gmailDraftId String?
    sent         Boolean   @default(false)
    sentAt       DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    contact  Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
    template Template @relation(fields: [templateId], references: [id])
}

model TestData {
    id        String   @id @default(cuid())
    userId    String
    name      String
    type      String // 'company', 'contact', 'template'
    data      Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model EmailList {
    id          String     @id @default(cuid())
    name        String
    description String?
    tags        String[]
    userId      String
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    contacts    Contact[]  @relation("EmailListContacts")
    sequences   Sequence[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@index([userId])
}

model Sequence {
    id            String            @id @default(cuid())
    name          String
    accessLevel   String            @default("team")
    scheduleType  String            @default("business")
    status        String            @default("draft")
    testMode      Boolean           @default(false)
    userId        String
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
    steps         SequenceStep[]
    user          User              @relation(fields: [userId], references: [id])
    EmailList     EmailList?        @relation(fields: [emailListId], references: [id])
    emailListId   String?
    stats         SequenceStats[]
    contacts      SequenceContact[] @relation("SequenceToContact")
    EmailEvent    EmailEvent[]
    EmailThread   EmailThread[]
    businessHours BusinessHours?

    @@index([userId])
}

model SequenceStats {
    id         String   @id @default(cuid())
    sequenceId String   @unique
    sequence   Sequence @relation(fields: [sequenceId], references: [id])

    // Email counts
    totalEmails     Int @default(0) // Total emails sent
    sentEmails      Int @default(0) // Successfully sent emails
    openedEmails    Int @default(0) // Total opens
    uniqueOpens     Int @default(0) // Unique opens
    clickedEmails   Int @default(0) // Total clicks
    repliedEmails   Int @default(0) // Total replies
    bouncedEmails   Int @default(0) // Total bounces
    unsubscribed    Int @default(0) // Total unsubscribes
    interested      Int @default(0) // Total interested contacts
    peopleContacted Int @default(0) // Total unique people contacted

    // Rates (stored as percentages)
    openRate   Float @default(0)
    clickRate  Float @default(0)
    replyRate  Float @default(0)
    bounceRate Float @default(0)

    // Time metrics (in minutes)
    avgResponseTime Float?

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    Contact   Contact? @relation(fields: [contactId], references: [id])
    contactId String?
}

model SequenceStep {
    id               String    @id @default(cuid())
    sequenceId       String
    stepType         String    @default("manual_email")
    status           String    @default("not_sent")
    priority         String    @default("medium")
    timing           String    @default("immediate")
    delayAmount      Int?
    delayUnit        String?
    subject          String?
    content          String?   @db.Text
    includeSignature Boolean   @default(true)
    note             String?   @db.Text
    order            Int
    previousStepId   String?
    replyToThread    Boolean   @default(false)
    threadId         String?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    sequence         Sequence  @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
    Template         Template? @relation(fields: [templateId], references: [id])
    templateId       String?

    @@index([sequenceId])
}

model SequenceContact {
    id              String    @id @default(cuid())
    sequenceId      String
    sequence        Sequence  @relation("SequenceToContact", fields: [sequenceId], references: [id])
    contactId       String
    contact         Contact   @relation("ContactToSequence", fields: [contactId], references: [id])
    status          String    @default("not_sent")
    currentStep     Int       @default(0)
    startedAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    lastProcessedAt DateTime?
    completedAt     DateTime?
    threadId        String?

    @@unique([sequenceId, contactId])
    @@index([sequenceId])
    @@index([contactId])
}

model DevSettings {
    id             String   @id @default(cuid())
    userId         String   @unique
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    disableSending Boolean  @default(false)
    testEmails     String[] // Store emails as an array
    updatedAt      DateTime @updatedAt
    createdAt      DateTime @default(now())

    @@index([userId])
}

model EmailTrackingEvent {
    id            String   @id @default(cuid())
    hash          String   @unique
    email         String
    userId        String
    sequenceId    String
    stepId        String
    contactId     String
    type          String // CREATED, OPENED, REPLIED
    openCount     Int      @default(0)
    messageId     String? // Gmail message ID
    gmailThreadId String? // Add this field
    timestamp     DateTime @default(now())
    createdAt     DateTime @default(now())

    // Add relation to track links in the email
    links TrackedLink[]

    @@index([type])
    @@index([timestamp])
    @@index([hash])
    @@index([userId])
    @@index([sequenceId])
    @@index([email])
    @@index([messageId])
    @@index([gmailThreadId])
}

// New model to store links that need to be tracked
model TrackedLink {
    id              String   @id @default(cuid())
    emailTrackingId String
    originalUrl     String
    clickCount      Int      @default(0)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relation to the email tracking event
    emailTracking EmailTrackingEvent @relation(fields: [emailTrackingId], references: [id], onDelete: Cascade)
    // Store click history
    clicks        LinkClick[]

    @@index([emailTrackingId])
}

// Rename and update LinkClickEvent to LinkClick
model LinkClick {
    id            String   @id @default(cuid())
    trackedLinkId String
    timestamp     DateTime @default(now())

    // Relation to the tracked link
    trackedLink TrackedLink @relation(fields: [trackedLinkId], references: [id], onDelete: Cascade)

    @@index([trackedLinkId])
    @@index([timestamp])
}

// Add this model to your schema
model EmailEvent {
    id        String   @id @default(cuid())
    emailId   String
    type      String // sent, opened, clicked, replied, bounced
    timestamp DateTime @default(now())
    metadata  Json? // Additional tracking data

    sequence   Sequence @relation(fields: [sequenceId], references: [id])
    sequenceId String
    Contact    Contact? @relation(fields: [contactId], references: [id])
    contactId  String?

    @@index([emailId, type])
    @@index([sequenceId, type])
}

enum EmailEventType {
    SENT
    OPENED
    CLICKED
    REPLIED
    BOUNCED
    SPAM
    UNSUBSCRIBED
    INTERESTED
}

// Add a new model to track email threads
model EmailThread {
    id             String   @id @default(cuid())
    gmailThreadId  String   @unique
    sequenceId     String
    contactId      String
    userId         String
    subject        String
    firstMessageId String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    sequence Sequence @relation(fields: [sequenceId], references: [id])
    contact  Contact  @relation(fields: [contactId], references: [id])
    user     User     @relation(fields: [userId], references: [id])

    @@index([gmailThreadId])
    @@index([sequenceId])
    @@index([contactId])
    @@index([userId])
}

model BusinessHours {
    id         String     @id @default(cuid())
    sequenceId String     @unique
    sequence   Sequence   @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
    timezone   String
    workDays   Int[]
    workHours  Json // { start: string, end: string }
    holidays   DateTime[]
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
}
