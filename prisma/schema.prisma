datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    contacts      Contact[]
    templates     Template[]
    drafts        Draft[]
    EmailSettings EmailSettings?
    Company       Company[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Contact {
    id          String   @id @default(cuid())
    userId      String
    companyId   String?
    name        String
    email       String
    title       String?
    domain      String?
    linkedinUrl String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    company     Company? @relation(fields: [companyId], references: [id])
    drafts      Draft[]
}

model Template {
    id        String             @id @default(cuid())
    userId    String
    name      String
    content   String
    sections  TemplateSection[]
    variables TemplateVariable[]
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt
    user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    drafts    Draft[]
}

model TemplateSection {
    id         String   @id @default(cuid())
    templateId String
    name       String
    content    String
    order      Int
    template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model TemplateVariable {
    id         String   @id @default(cuid())
    templateId String
    name       String
    label      String
    template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Draft {
    id           String    @id @default(cuid())
    userId       String
    contactId    String
    templateId   String
    companyId    String?
    content      String
    gmailDraftId String?
    sent         Boolean   @default(false)
    sentAt       DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    contact      Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
    template     Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
    company      Company?  @relation(fields: [companyId], references: [id])
}

model EmailSettings {
    id               String   @id @default(cuid())
    userId           String   @unique
    defaultSubject   String?
    defaultSignature String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
    id        String    @id @default(cuid())
    name      String
    website   String?
    domain    String?
    address   String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    contacts  Contact[]
    drafts    Draft[]
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([name, userId], name: "name_userId")
}
